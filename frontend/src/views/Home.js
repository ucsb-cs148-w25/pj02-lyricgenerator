import React from 'react'
import { useState, useRef } from 'react'
import './Home.css';
import photo_icon from '../assets/photo_icon.png';
import { IoCloseSharp } from "react-icons/io5";
import { HiMiniSparkles } from "react-icons/hi2";
import { FaInstagram, FaTrash } from "react-icons/fa";
import axios from "axios";


export default function Home() {
Â Â const [files, setFiles] = useState([]);
Â Â const [fileUploaded, setFileUploaded] = useState(false);
Â Â const [caption, setCaption] = useState('');
Â Â const [song, setSong] = useState('');
Â Â const [artist, setArtist] = useState('');
Â Â const [dragBoxColor, setDragBoxColor] = useState('');
Â Â const fileInput = useRef([]);
Â Â const [copied, setCopied] = useState(false);
Â Â const [generated, setGenerated] = useState(false);
Â Â const [generatedData, setGeneratedData] = useState(null);
Â Â const [error, setError] = useState(null);
Â Â const [tracks, setTracks] = useState([]); // Stores the tracks
Â Â const [selectedTrack, setSelectedTrack] = useState(null); // Stores the chosen track
  const [imageEncoding, setImageEncoding] = useState([]); // stores the image encodings array

Â Â // File upload
Â Â function handleChange(e) {
Â Â Â Â const selectedFiles = Array.from(e.target.files);
Â Â Â Â setFiles(selectedFiles);
Â Â Â Â setFileUploaded(true);
Â Â }

Â Â // File removed
Â Â const handleDelete = (index) => {
Â Â Â Â setFiles((prevFiles) => {
Â Â Â Â Â Â const newFiles = []
Â Â Â Â Â Â for (let i = 0; i<prevFiles.length; i++){
Â Â Â Â Â Â Â Â if (i!== index) {
Â Â Â Â Â Â Â Â Â Â newFiles.push(prevFiles[i]);
Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â }
Â Â Â Â Â Â if (newFiles.length === 0) {
        setFileUploaded(false);setGenerated(false);
        setFileUploaded(false);
Â Â Â Â Â Â Â Â setGenerated(false);
Â Â Â Â Â Â Â Â setCaption('');
Â Â Â Â Â Â Â Â setSong('');
Â Â Â Â Â Â Â Â setArtist('');
        setSelectedTrack(null)
        setTracks([])
        setImageEncoding([])
Â Â Â Â Â Â }
Â Â Â Â Â Â return newFiles;
Â Â Â Â });
Â Â };

Â Â // Drag and Drop
  const handleDrag = (event) => {
    event.preventDefault();
    setDragBoxColor('var(--tertiary-color');
  }

  const handleDrop = (event) => {
    event.preventDefault();
    const droppedFiles = Array.from(event.dataTransfer.files);
    if (droppedFiles.length > 0) {
      setFiles((prevFiles) => prevFiles.concat(droppedFiles));
      setFileUploaded(true)
    }
    setDragBoxColor('white');
  }

Â Â async function handleGenerate() {
Â Â Â Â if (files.length === 0) {
Â Â Â Â Â Â alert("Please upload an image first.");
Â Â Â Â Â Â return;
Â Â Â Â }
Â Â 
Â Â Â Â const file = files[0]; // Restrict to only one file
Â Â 
Â Â Â Â const formData = new FormData();
Â Â Â Â formData.append("image", file); // Ensure correct key name
Â Â 
Â Â Â Â try {
Â Â Â Â Â Â setError(null);
Â Â Â Â Â Â const response = await axios.post("http://localhost:5005/get_top_tracks", formData, {
Â Â Â Â Â Â Â Â headers: { "Content-Type": "multipart/form-data" },
Â Â Â Â Â Â Â Â withCredentials: true
Â Â Â Â Â Â });
Â Â 
Â Â Â Â Â Â if (response.data) {
Â Â Â Â Â Â Â Â setTracks(response.data.tracks);
        setImageEncoding(response.image_encodings); // need this variable to store the image as an array of numbers (will be sent back to the backend)
Â Â Â Â Â Â }
Â Â Â Â } catch (err) {
Â Â Â Â Â Â console.error("Error generating data:", err);
Â Â Â Â Â Â setError("Error generating data. Try again.");
Â Â Â Â }
Â Â }

Â Â const handleTrackClick = (track) => {
Â Â Â Â setSelectedTrack(track);
Â Â }


Â Â function copyCaption(){
Â Â Â Â if (!caption){
Â Â Â Â Â Â alert("No caption available to copy.")
Â Â Â Â }
Â Â Â Â navigator.clipboard.writeText(caption).then(() => {
Â Â Â Â Â Â setCopied(true);
Â Â Â Â Â Â setTimeout(() => setCopied(false), 2000);
Â Â Â Â });
Â Â }
Â Â 
Â Â return ( 
Â Â Â Â <div className='container'> 
Â Â Â Â Â Â <div className='gradient'>
Â Â Â Â Â Â Â Â { !generated && (
Â Â Â Â Â Â Â Â <div style={{
Â Â Â Â Â Â Â Â Â Â display: 'flex',
Â Â Â Â Â Â Â Â Â Â flexDirection: 'column',
Â Â Â Â Â Â Â Â Â Â gap: 24
Â Â Â Â Â Â Â Â }}>
Â Â Â Â Â Â Â Â Â Â <text className='header'>Image2Caption</text>
Â Â Â Â Â Â Â Â Â Â <div style={{
Â Â Â Â Â Â Â Â Â Â Â Â display: 'flex',
Â Â Â Â Â Â Â Â Â Â Â Â flexDirection: 'row',
Â Â Â Â Â Â Â Â Â Â Â Â gap: 6
Â Â Â Â Â Â Â Â Â Â }}>
Â Â Â Â Â Â Â Â Â Â Â Â <HiMiniSparkles color='white' width={16} height={16}/>
Â Â Â Â Â Â Â Â Â Â Â Â <text className='subheader'>Generate exciting and creative captions for your pictures!</text>
Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â )}Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â <div className={`image-upload-container ${generated ? 'hide' : ''}`}>
Â Â Â Â Â Â Â Â Â Â {!fileUploaded && !generated && (
Â Â Â Â Â Â Â Â Â Â Â Â <div 
Â Â Â Â Â Â Â Â Â Â Â Â className='image-upload' 
Â Â Â Â Â Â Â Â Â Â Â Â onDragOver={handleDrag} 
Â Â Â Â Â Â Â Â Â Â Â Â onDragEnter={() => setDragBoxColor('var(--tertiary-color')}
Â Â Â Â Â Â Â Â Â Â Â Â onDragLeave={() => setDragBoxColor('white')}
Â Â Â Â Â Â Â Â Â Â Â Â onDrop={handleDrop}
Â Â Â Â Â Â Â Â Â Â Â Â style={{ backgroundColor: `${dragBoxColor}` }}
Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <input 
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â type='file' 
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â hidden
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ref={fileInput}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onChange={handleChange}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â multiple
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <img src={photo_icon} width={36} height={36} alt="Upload" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <text className='drag-text'>Drag and drop an image to generate a caption!</text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <text className='or-text'>or</text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button 
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className='secondary btn'
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => fileInput.current.click()}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Choose from this device
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â )}

Â Â Â Â Â Â Â Â {fileUploaded && !generated && (
Â Â Â Â Â Â Â Â Â Â Â Â <div className='uploaded-img-container'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â {files.map((file, index) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div key = {index} className = "uploaded-file">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <img src={URL.createObjectURL(file)} width={36} height={36} alt="Upload" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p>{file.name}</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <IoCloseSharp
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={{ cursor: 'pointer' }}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => handleDelete(index)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â {!generated && (
Â Â Â Â Â Â Â Â Â Â <button className='primary-purple btn' onClick={handleGenerate}>
Â Â Â Â Â Â Â Â Â Â Â Â Generate!
Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â </div>

Â Â Â Â Â Â Â Â {error && <p style={{ color: "red" }}>{error}</p>}
Â Â Â Â Â Â Â Â {selectedTrack ? (
Â Â Â Â Â Â Â Â Â Â Â Â <div className="generated-caption">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p>Generated Caption:</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <h2>"{selectedTrack.lyrics[0]}"</h2>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p>from <strong>{selectedTrack.title}</strong> by <strong>{selectedTrack.artist}</strong></p>
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â Â Â <div className="track-list">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {tracks.map((track, index) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button key={index} className="track-button" onClick={() => handleTrackClick(track)}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {track.title} - {track.artist}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <span className="quote">"{track.lyrics[0]}"</span>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â )}

Â Â Â Â Â Â Â Â {files.length > 0 && caption && (
Â Â Â Â Â Â Â Â Â Â <div className="polaroid-container">
Â Â Â Â Â Â Â Â Â Â Â Â {files.map((file, index) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div key={index} className="polaroid-wrapper">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className='polaroid-image-container'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className='polaroid'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <img src={URL.createObjectURL(file)} alt="Uploaded preview" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="caption-text">"{caption}"</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="song-credits">ðŸŽµ {song} by {artist}</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className='button-container'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button className="copy-button" onClick={copyCaption}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {copied ? "Copied!" : "Copy"}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button className='instagram-button'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <FaInstagram/> Instagram
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button className='delete-button' onClick={() => handleDelete(index)}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <FaTrash /> Delete
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button className='save-button'>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Save
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â )}
Â Â Â Â </div>
Â Â Â Â </div>
Â Â )
}